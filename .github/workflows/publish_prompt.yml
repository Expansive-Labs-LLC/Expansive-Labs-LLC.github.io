name: Publish Stable Diffusion Prompt

on:
  pull_request:
    branches: [main] # Or your target branch
    paths:
      - 'src/posts/**.md' # Updated path to your blog post files

  workflow_dispatch:
    inputs:
      filepath:
        description: 'Path to the blog post Markdown file (for manual triggering)'
        required: true

jobs:
  extract_and_queue_prompt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python Dependencies
        run: python -m pip install --upgrade pip && python -m pip install python-frontmatter boto3

      - name: Change Working Directory to Root
        run: cd ${{ github.workspace }}

      - name: Extract Prompt and Send to SQS (Push Trigger)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SQS_QUEUE_URL: ${{ secrets.SQS_QUEUE_URL }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_COMMIT_ADDED: ${{ github.event.commits[0].added[0] || '' }}
          GITHUB_COMMIT_MODIFIED: ${{ github.event.commits[0].modified[0] || '' }}
          GITHUB_DISPATCH_FILEPATH: ${{ github.event.inputs.filepath || '' }}
        run: |
          python <<EOF
          import os
          import re
          import frontmatter
          import json
          import boto3

          def extract_prompt(filepath):
              with open(filepath, 'r') as f:
                  metadata = frontmatter.load(f)
                  if 'tags' in metadata and isinstance(metadata['tags'], list):
                      for tag in metadata['tags']:
                          if isinstance(tag, dict) and 'prompt' in tag:
                              return tag['prompt']
                  # Fallback to searching for a custom comment tag
                  content = f.read()
                  match = re.search(r'', content)
                  if match:
                      return match.group(1).strip()
              return None

          event_name = os.environ.get("GITHUB_EVENT_NAME")
          filepath = ""

          if event_name == "pull_request":
              pull_request = json.loads(os.environ.get("GITHUB_EVENT_PULL_REQUEST", "{}"))
              if pull_request and pull_request.get('commits'):
                  for commit_obj in pull_request['commits']:
                      commit_sha = commit_obj.get('sha')
                      if commit_sha:
                          CHANGED_FILES=$(git show --pretty="" --name-only $commit_sha)
                          for file in $CHANGED_FILES; do
                            if [[ "$file" == *'src/posts/'*.md ]]; then
                              filepath="$file"
                              break 2 # Break out of both loops
                            fi
                          done
              elif event_name == "workflow_dispatch":
                  filepath = os.environ.get("GITHUB_DISPATCH_FILEPATH")

          if [[ -z "$filepath" ]]; then
            echo "No relevant blog post file found for this event."
            exit(1)

          prompt = extract_prompt(filepath)

          if prompt:
              sqs = boto3.client('sqs', region_name=os.environ['AWS_REGION'],
                                 aws_access_key_id=os.environ['AWS_ACCESS_KEY_ID'],
                                 aws_secret_access_key=os.environ['AWS_SECRET_ACCESS_key'])
              response = sqs.send_message(
                  QueueUrl=os.environ['SQS_QUEUE_URL'],
                  MessageBody=json.dumps({'prompt': prompt, 'blog_filepath': filepath}) # Include filepath for context
              )
              print(f"Prompt sent to SQS for $filepath. Message ID: {response['MessageId']}")
          else:
              print(f"No Stable Diffusion prompt found in $filepath")
          EOF

  extract_and_queue_prompt_manual:
    needs: extract_and_queue_prompt # Ensure this job runs independently if manually triggered
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python Dependencies
        run: python -m pip install --upgrade pip && python -m pip install python-frontmatter boto3

      - name: Extract Prompt and Send to SQS (Manual Trigger)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SQS_QUEUE_URL: ${{ secrets.SQS_QUEUE_URL }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_DISPATCH_FILEPATH: ${{ github.event.inputs.filepath || '' }}
        run: |
          python <<EOF
          import os
          import re
          import frontmatter
          import json
          import boto3

          def extract_prompt(filepath):
              with open(filepath, 'r') as f:
                  metadata = frontmatter.load(f)
                  if 'tags' in metadata and isinstance(metadata['tags'], list):
                      for tag in metadata['tags']:
                          if isinstance(tag, dict) and 'prompt' in tag:
                              return tag['prompt']
                  # Fallback to searching for a custom comment tag
                  content = f.read()
                  match = re.search(r'', content)
                  if match:
                      return match.group(1).strip()
              return None

          event_name = os.environ.get("GITHUB_EVENT_NAME")
          filepath = os.environ.get("GITHUB_DISPATCH_FILEPATH")

          if not filepath:
              print("No file path provided for manual trigger.")
              exit(1)

          prompt = extract_prompt(filepath)

          if prompt:
              sqs = boto3.client('sqs', region_name=os.environ['AWS_REGION'],
                                 aws_access_key_id=os.environ['AWS_ACCESS_KEY_ID'],
                                 aws_secret_access_key=os.environ['AWS_SECRET_ACCESS_KEY'])
              response = sqs.send_message(
                  QueueUrl=os.environ['SQS_QUEUE_URL'],
                  MessageBody=json.dumps({'prompt': prompt, 'blog_filepath': filepath}) # Include filepath for context
              )
              print(f"Prompt sent to SQS for {filepath} (manual trigger). Message ID: {response['MessageId']}")
          else:
              print(f"No Stable Diffusion prompt found in {filepath}")
          EOF
